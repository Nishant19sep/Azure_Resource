trigger: none

variables:
  provider: 'azurerm'
  serviceConnection: 'nt-spn'
  terraformVersion: 'latest'
  mainWorkingDir: '$(System.DefaultWorkingDirectory)/Storage_With_Module/Parent Module'
  validateWorkingDir: '$(System.DefaultWorkingDirectory)/Storage_With_Module'
  storageAccountName: 'ntstg19'
  containerName: 'nt-container'
  stateFileKey: 'terraform.tfstate'

pool:
  name: 'Agent-Self-Hosted'

stages:

# ðŸŸ¢ Stage 1: Terraform Init
- stage: Terraform_Init
  displayName: "Terraform Init"
  jobs:
  - job: Init
    steps:
    - task: TerraformInstaller@1
      inputs:
        terraformVersion: $(terraformVersion)

    - task: TerraformTask@5
      displayName: INIT
      inputs:
        provider: $(provider)
        command: 'init'
        workingDirectory: $(mainWorkingDir)
        backendAzureRmUseEntraIdForAuthentication: false
        backendServiceArm: $(serviceConnection)
        backendAzureRmStorageAccountName: $(storageAccountName)
        backendAzureRmContainerName: $(containerName)
        backendAzureRmKey: $(stateFileKey)

# ðŸŸ¡ Stage 2: Terraform Validate (Runs only if Init is successful)
- stage: Terraform_Validate
  displayName: "Terraform Validate"
  dependsOn: Terraform_Init
  condition: succeeded()
  jobs:
  - job: Validate
    steps:
    - task: TerraformTask@5
      displayName: VALIDATE
      inputs:
        provider: $(provider)
        command: 'validate'
        workingDirectory: $(validateWorkingDir)

# ðŸ”µ Stage 3: Terraform Plan (Runs only if Validate is successful)
- stage: Terraform_Plan
  displayName: "Terraform Plan"
  dependsOn: Terraform_Validate
  condition: succeeded()
  jobs:
  - job: Plan
    steps:
    - task: TerraformTask@5
      displayName: PLAN
      inputs:
        provider: $(provider)
        command: 'plan'
        workingDirectory: $(mainWorkingDir)
        environmentServiceNameAzureRM: $(serviceConnection)
